// Generated by CoffeeScript 1.10.0
(function() {
  var async, request;

  async = require('async');

  request = require('request');

  module.exports = {
    allowCrossDomain: function(req, res, next) {
      res.header('Access-Control-Allow-Origin', '*');
      res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
      res.header('Access-Control-Allow-Headers', 'Content-Type');
      if ('OPTIONS' === req.method) {
        return res.send(200);
      } else {
        return next();
      }
    },
    calcDistance: function(coord1, coord2) {
      var dist, distance, lat1, lat2, lon1, lon2, radlat1, radlat2, radlon1, radlon2, radtheta, ref, ref1, theta;
      ref = [coord1.lat, coord1.long], lat1 = ref[0], lon1 = ref[1];
      ref1 = [coord2.lat, coord2.long], lat2 = ref1[0], lon2 = ref1[1];
      radlat1 = Math.PI * lat1 / 180;
      radlat2 = Math.PI * lat2 / 180;
      radlon1 = Math.PI * lon1 / 180;
      radlon2 = Math.PI * lon2 / 180;
      theta = lon1 - lon2;
      radtheta = Math.PI * theta / 180;
      dist = Math.sin(radlat1) * Math.sin(radlat2);
      dist += Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
      dist = Math.acos(dist);
      dist *= 180 / Math.PI;
      dist *= 60 * 1.1515;
      return distance = {
        'mi': Math.floor(dist),
        'km': Math.floor(dist * 1.609344)
      };
    },
    getShelters: function(done) {
      return async.waterfall([
        function(next) {
          return request({
            method: 'GET',
            url: 'http://app.redcross.org/nss-app/pages/mapServicesList.jsp?action=list'
          }, next);
        }, function(resp, body, next) {
          var parseJSON;
          if (!resp) {
            return next('resp is undefined. uh oh.');
          }
          if (resp.statusCode < 200 || resp.statusCode > 302) {
            return next("bad " + body);
          }
          parseJSON = function() {
            var err, error;
            try {
              body = JSON.parse(body);
              body = body.Locations;
              return next(null, body);
            } catch (error) {
              err = error;
              return next(err);
            }
          };
          return parseJSON();
        }
      ], function(err, body) {
        return done(err, body);
      });
    }
  };

  String.prototype.toProperCase = function() {
    return this.replace(/\w\S*/g, function(txt) {
      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
    });
  };

}).call(this);
